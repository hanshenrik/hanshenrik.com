---
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
import {
  IS_PLAYING_ICON,
  NEXT_ICON,
  PAUSE_ICON,
  PLAY_ICON,
  PREVIOUS_ICON,
} from "../icons";
import { PLAY_LOCAL_TRACK } from "../umamiEvents";
import { stringToHtmlTagId } from "../utils";

interface Props {
  recordings: any[];
  title: string;
  playerId: string;
}

const { recordings, title, playerId } = Astro.props;
---

<div>
  <h3 class="mb-4" id={stringToHtmlTagId(title)}>{title}</h3>
  <div class="max-w-full rounded-lg border border-gray-200 bg-white shadow-sm">
    <!-- Player Controls -->
    <div class="flex items-center gap-4 border-b border-gray-100 p-4">
      <button
        id={`prev-track-${playerId}`}
        class="rounded-full p-2 text-cyan-700 hover:bg-gray-100"
        aria-label="Previous track"
      >
        <Icon name={PREVIOUS_ICON} size={20} />
      </button>
      <button
        id={`play-pause-${playerId}`}
        class="rounded-full p-2 text-cyan-700 hover:bg-gray-100"
        aria-label="Play/Pause"
      >
        <Icon name={PLAY_ICON} size={32} class="play-icon" />
        <Icon name={PAUSE_ICON} size={32} class="pause-icon hidden" />
      </button>
      <button
        id={`next-track-${playerId}`}
        class="rounded-full p-2 text-cyan-700 hover:bg-gray-100"
        aria-label="Next track"
      >
        <Icon name={NEXT_ICON} size={20} />
      </button>
      <div class="min-w-0 flex-1 overflow-x-hidden">
        <div
          class="text-sm font-medium break-words text-gray-900"
          id={`now-playing-${playerId}`}
        >
          <br />
        </div>
        <div
          class="text-xs break-words text-gray-500"
          id={`now-playing-artist-${playerId}`}
        >
          Select a track to play
        </div>
        <div
          class="text-xs whitespace-nowrap text-gray-500"
          id={`now-playing-description-${playerId}`}
        >
          <br />
        </div>
      </div>
    </div>
    <!-- Track List -->
    <div class="max-h-[420px] divide-y divide-gray-100 overflow-y-auto">
      {
        recordings.map(({ data }, index) => (
          <button
            class="flex w-full items-center gap-4 p-3 text-left hover:bg-gray-50"
            data-track-index={index}
            data-player-id={playerId}
          >
            <div class="flex min-w-0 flex-1 items-center gap-4">
              {data.image && (
                <div class="relative h-12 w-12 flex-shrink-0 overflow-hidden rounded">
                  <Image
                    src={data.image}
                    width={48}
                    height={48}
                    quality={100}
                    alt={`${data.artist} - ${data.name}`}
                    class="h-full w-full object-cover"
                  />
                </div>
              )}
              <div class="min-w-0 flex-1">
                <h4 id="name" class="font-medium break-words text-gray-900">
                  {data.name}
                </h4>
                <p id="artist" class="text-sm break-words text-gray-600">
                  {data.artist}
                </p>
                {data.description && (
                  <p
                    id="description"
                    class="hidden text-xs break-words text-gray-500"
                  >
                    {data.description}
                  </p>
                )}
              </div>
              <div
                class="flex-shrink-0 text-cyan-700 opacity-0 transition-opacity duration-200"
                data-playing-indicator
              >
                <Icon name={IS_PLAYING_ICON} size={24} />
              </div>
              {data.localFile && (
                <source
                  src={`audio/recordings/${data.localFile.type}/${data.localFile.src}`}
                  type={`audio/${data.localFile.format ? data.localFile.format : "mpeg"}`}
                />
              )}
            </div>
          </button>
        ))
      }
    </div>
  </div>
</div>

<script define:vars={{ playerId, PLAY_LOCAL_TRACK }}>
  const tracks = document.querySelectorAll(
    `[data-track-index][data-player-id="${playerId}"]`,
  );
  const playPauseBtn = document.getElementById(`play-pause-${playerId}`);
  const prevBtn = document.getElementById(`prev-track-${playerId}`);
  const nextBtn = document.getElementById(`next-track-${playerId}`);
  const nowPlaying = document.getElementById(`now-playing-${playerId}`);
  const nowPlayingArtist = document.getElementById(
    `now-playing-artist-${playerId}`,
  );
  const nowPlayingDescription = document.getElementById(
    `now-playing-description-${playerId}`,
  );

  if (
    !playPauseBtn ||
    !prevBtn ||
    !nextBtn ||
    !nowPlaying ||
    !nowPlayingArtist
  ) {
    throw new Error("Required player elements not found");
  }

  let currentTrack = null;
  let currentIndex = -1;
  const audio = new Audio();

  function updateNowPlaying(track) {
    const name = track.querySelector("#name")?.textContent ?? "";
    const artist = track.querySelector("#artist")?.textContent ?? "";
    const description = track.querySelector("#description")?.textContent ?? "";
    nowPlaying.textContent = name;
    nowPlayingArtist.textContent = artist;
    nowPlayingDescription.textContent = description;

    // Always reset the animation
    nowPlayingDescription.classList.remove("marquee-container");

    setTimeout(() => {
      // Add marquee effect if there's a description
      if (description) {
        const scrollWidth = nowPlayingDescription.scrollWidth;
        const duration = scrollWidth / 30;

        nowPlayingDescription.style.setProperty(
          "--translate-x-width",
          `-${nowPlayingDescription.scrollWidth}px`,
        );
        nowPlayingDescription.style.setProperty("--duration", `${duration}s`);
        nowPlayingDescription.style.setProperty("--delay", "2s");
        nowPlayingDescription.classList.add("marquee-container");
      }
    }, 2000);
  }

  function setActiveTrack(track) {
    tracks.forEach((t) => {
      t.classList.remove("bg-gray-50");
      const indicator = t.querySelector("[data-playing-indicator]");
      if (indicator) {
        indicator.classList.remove("playing");
        indicator.classList.add("opacity-0");
      }
    });
    track.classList.add("bg-gray-50");
    const indicator = track.querySelector("[data-playing-indicator]");
    if (indicator) {
      indicator.classList.add("playing");
      indicator.classList.remove("opacity-0");
    }
  }

  function playTrack(index) {
    const track = tracks[index];
    const source = track.querySelector("source");
    if (!source?.src) return;

    // If clicking the currently playing track, toggle play/pause
    if (currentTrack === track) {
      togglePlayPause();
      return;
    }

    currentIndex = index;
    currentTrack = track;
    audio.src = source.src;
    audio.play();
    updateNowPlaying(track);
    setActiveTrack(track);

    // Track play event in Umami
    const trackName = track.querySelector("#name")?.textContent ?? "";
    const artist = track.querySelector("#artist")?.textContent ?? "";
    if (window.umami) {
      window.umami.track(PLAY_LOCAL_TRACK, {
        track: trackName?.trim(),
        artist: artist?.trim(),
      });
    }
  }

  function togglePlayPause() {
    if (!currentTrack) {
      playTrack(0);
      return;
    }

    if (audio.paused) {
      audio.play();
      const playIcon = playPauseBtn.querySelector(".play-icon");
      const pauseIcon = playPauseBtn.querySelector(".pause-icon");
      if (playIcon && pauseIcon) {
        playIcon.classList.add("hidden");
        pauseIcon.classList.remove("hidden");
      }
    } else {
      audio.pause();
      const playIcon = playPauseBtn.querySelector(".play-icon");
      const pauseIcon = playPauseBtn.querySelector(".pause-icon");
      if (playIcon && pauseIcon) {
        playIcon.classList.remove("hidden");
        pauseIcon.classList.add("hidden");
      }
    }
  }

  function playNext() {
    if (currentIndex < tracks.length - 1) {
      playTrack(currentIndex + 1);
    }
  }

  function playPrev() {
    if (currentIndex > 0) {
      playTrack(currentIndex - 1);
    }
  }

  // Event Listeners
  tracks.forEach((track, index) => {
    track.addEventListener("click", () => playTrack(index));
  });

  playPauseBtn.addEventListener("click", togglePlayPause);
  prevBtn.addEventListener("click", playPrev);
  nextBtn.addEventListener("click", playNext);

  audio.addEventListener("ended", playNext);
  audio.addEventListener("pause", () => {
    const playIcon = playPauseBtn.querySelector(".play-icon");
    const pauseIcon = playPauseBtn.querySelector(".pause-icon");
    if (playIcon && pauseIcon) {
      playIcon.classList.remove("hidden");
      pauseIcon.classList.add("hidden");
    }
    if (currentTrack) {
      const indicator = currentTrack.querySelector("[data-playing-indicator]");
      if (indicator) {
        indicator.classList.remove("playing");
      }
    }
  });
  audio.addEventListener("play", () => {
    const playIcon = playPauseBtn.querySelector(".play-icon");
    const pauseIcon = playPauseBtn.querySelector(".pause-icon");
    if (playIcon && pauseIcon) {
      playIcon.classList.add("hidden");
      pauseIcon.classList.remove("hidden");
    }
    if (currentTrack) {
      const indicator = currentTrack.querySelector("[data-playing-indicator]");
      if (indicator) {
        indicator.classList.add("playing");
      }
    }
  });
</script>
