---
import { Icon } from "astro-icon/components";
import { PIANO_PLUKK_ICON, PIANO_PLUKK_NOTE_ICONS } from "../icons";
import IconButton from "./IconButton.astro";

interface Props {
  class?: string;
}

const { class: className }: Props = Astro.props;

const soundFiles = Array.from({ length: 31 }, (_, i) => {
  const num = i + 1;
  return `${num.toString().padStart(2, "0")}.mp3`;
});
---

<div class:list={["relative", className]}>
  <div class="pointer-events-none absolute inset-0">
    {
      PIANO_PLUKK_NOTE_ICONS.map((icon) => (
        <Icon
          class="piano-plukk-note z-50 hidden text-gray-400 opacity-0 transition-opacity duration-[3s] ease-linear"
          name={icon}
          size={48}
        />
      ))
    }
  </div>
  <IconButton
    id="piano-plukk-trigger"
    icon={PIANO_PLUKK_ICON}
    label="Play piano plukk sound"
    class="mt-0.5 -ml-3 text-sm"
  />
</div>

<style>
  .piano-plukk-note {
    position: fixed;
  }
</style>

<script define:vars={{ soundFiles }}>
  const button = document.getElementById("piano-plukk-trigger");
  const notes = document.querySelectorAll(".piano-plukk-note");
  const audioCache = new Map();
  let previousFile = "";

  // Preload all audio files
  soundFiles.forEach((file) => {
    const audio = new Audio(`/audio/pianoplukk/${file}`);
    audio.preload = "auto";
    audioCache.set(file, audio);
  });

  function showNote(note) {
    const x = Math.random() * (window.innerWidth - 48);
    const y = Math.random() * (window.innerHeight - 48);

    note.setAttribute("style", `left: ${x}px; top: ${y}px;`);
    note.classList.remove("hidden");
    // Force a reflow to ensure the transition works
    note.offsetHeight;
    note.classList.remove("opacity-0");

    setTimeout(() => {
      note.classList.add("opacity-0");
      setTimeout(() => note.classList.add("hidden"), 3000);
    }, 1);
  }

  function playRandomSound() {
    const filteredFiles = soundFiles.filter((file) => file !== previousFile);
    const randomFile =
      filteredFiles[Math.floor(Math.random() * filteredFiles.length)];
    previousFile = randomFile;

    const audio = audioCache.get(randomFile).cloneNode();
    audio.play();

    audio.addEventListener("ended", () => {
      const index = Array.from(audioCache.values()).indexOf(audio);
      if (index > -1) {
        audioCache.delete(soundFiles[index]);
      }
    });
  }

  button?.addEventListener("click", () => {
    const randomNote = notes[Math.floor(Math.random() * notes.length)];
    showNote(randomNote);
    playRandomSound();
  });
</script>
