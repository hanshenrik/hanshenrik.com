---
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import Link from "../components/Link.astro";
import Layout from "../layouts/Layout.astro";

const recordings = await getCollection("recordings");

const releasedRecordings = recordings.filter(
  (recording) => !recording.data.localFile,
);
const localRecordings = recordings.filter(
  (recording) => recording.data.localFile,
);
---

<Layout title="Recordings">
  <div class="mx-auto max-w-7xl space-y-8">
    <h1 class="mb-12">Recordings</h1>
    <h2 class="mb-4">Official releases</h2>
    <div class="flex flex-col gap-2 md:max-w-1/2">
      <iframe
        class="h-[400px] rounded-none md:h-[520px]"
        src="https://open.spotify.com/embed/playlist/0HQEtUAwUe5VnLh42iIjSb?utm_source=generator&theme=0"
        width="100%"
        height="100%"
        allow="clipboard-write; encrypted-media; fullscreen; picture-in-picture"
        loading="lazy"></iframe>
      <Link
        href="https://tidal.com/browse/playlist/0a61d353-ade3-4efe-a517-a82d99b47354"
        target="_blank"
        rel="noopener noreferrer"
        class="flex w-fit items-center gap-2 self-end"
      >
        <Icon name="arcticons:tidal" size={24} stroke-width={1.5} />
        <span>Also available on Tidal</span>
      </Link>
    </div>
    <div class="grid grid-cols-2 gap-8 md:grid-cols-3 lg:grid-cols-5">
      {
        releasedRecordings.map(({ data }) => (
          <div class="card group">
            {data.image && (
              <div class="relative aspect-square overflow-hidden">
                <Image
                  src={data.image}
                  width={400}
                  height={400}
                  quality={100}
                  alt={`${data.artist} - ${data.name}`}
                  class="h-full w-full object-cover"
                />
              </div>
            )}
            <div class="card-content py-1">
              <h3 class="text-lg font-medium">{data.artist}</h3>
              <h4 class="text-sm text-gray-500">{data.name}</h4>
              <details class="text-sm text-gray-500">
                <summary>More</summary>
                <div class="mt-2">
                  <p class="text-sm text-gray-500">{data.description}</p>
                </div>
              </details>
              <div class="flex w-fit flex-wrap gap-1">
                {data.spotifyLink && (
                  <a
                    href={data.spotifyLink}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="inline-flex h-10 w-10 items-center justify-center rounded-full text-green-700 transition-colors duration-200 hover:bg-green-200"
                  >
                    <Icon name="arcticons:spotify" size={24} />
                  </a>
                )}
                {data.tidalLink && (
                  <a
                    href={data.tidalLink}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="inline-flex h-10 w-10 items-center justify-center rounded-full text-black transition-colors duration-200 hover:bg-black hover:text-white"
                  >
                    <Icon name="arcticons:tidal" stroke-width={1.5} size={24} />
                  </a>
                )}
                {data.appleLink && (
                  <a
                    href={data.appleLink}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="inline-flex h-10 w-10 items-center justify-center rounded-full text-pink-700 transition-colors duration-200 hover:bg-pink-200"
                  >
                    <Icon name="arcticons:apple" size={24} />
                  </a>
                )}
                {data.soundcloudLink && (
                  <a
                    href={data.soundcloudLink}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="inline-flex h-10 w-10 items-center justify-center rounded-full text-orange-700 transition-colors duration-200 hover:bg-orange-200"
                  >
                    <Icon name="arcticons:soundcloud" size={32} />
                  </a>
                )}
              </div>
            </div>
          </div>
        ))
      }
    </div>
    <h2 class="mb-4">Unreleased stuff</h2>
    <p>
      More music at
      <Link
        href="https://soundcloud.com/hanshenrik"
        target="_blank"
        rel="noopener noreferrer"
        class="inline-flex w-fit items-center gap-1"
      >
        <span>SoundCloud</span>
      </Link>.
    </p>
    <div class="rounded-lg border border-gray-200 bg-white shadow-sm">
      <!-- Player Controls -->
      <div class="flex items-center gap-4 border-b border-gray-100 p-4">
        <button
          id="prev-track"
          class="rounded-full p-2 text-gray-600 hover:bg-gray-100"
          aria-label="Previous track"
        >
          ⏮️
        </button>
        <button
          id="play-pause"
          class="rounded-full p-2 text-gray-600 hover:bg-gray-100"
          aria-label="Play/Pause"
        >
          ⏯️
        </button>
        <button
          id="next-track"
          class="rounded-full p-2 text-gray-600 hover:bg-gray-100"
          aria-label="Next track"
        >
          ⏭️
        </button>
        <div class="flex-1">
          <div class="text-sm font-medium text-gray-900" id="now-playing">
            Select a track to play
          </div>
          <div class="text-xs text-gray-500" id="now-playing-artist"></div>
        </div>
      </div>
      <!-- Track List -->
      <div class="divide-y divide-gray-100">
        {
          localRecordings.map(({ data }, index) => (
            <button
              class="flex w-full items-center gap-4 p-3 text-left hover:bg-gray-50"
              data-track-index={index}
            >
              <div class="flex min-w-0 flex-1 items-center gap-4">
                {data.image && (
                  <div class="relative h-12 w-12 flex-shrink-0 overflow-hidden rounded">
                    <Image
                      src={data.image}
                      width={48}
                      height={48}
                      quality={100}
                      alt={`${data.artist} - ${data.name}`}
                      class="h-full w-full object-cover"
                    />
                  </div>
                )}
                <div class="min-w-0 flex-1">
                  <h3 class="truncate font-medium text-gray-900">
                    {data.name}
                  </h3>
                  <p class="truncate text-sm text-gray-600">{data.artist}</p>
                </div>
                {data.localFile && (
                  <source
                    src={`audio/recordings/${data.localFile.src}`}
                    type={`audio/${data.localFile.format ? data.localFile.format : "mpeg"}`}
                  />
                )}
              </div>
            </button>
          ))
        }
      </div>
    </div>
  </div>
</Layout>

<script>
  const tracks =
    document.querySelectorAll<HTMLButtonElement>("[data-track-index]");
  const playPauseBtn = document.getElementById("play-pause");
  const prevBtn = document.getElementById("prev-track");
  const nextBtn = document.getElementById("next-track");
  const nowPlaying = document.getElementById("now-playing");
  const nowPlayingArtist = document.getElementById("now-playing-artist");

  if (
    !playPauseBtn ||
    !prevBtn ||
    !nextBtn ||
    !nowPlaying ||
    !nowPlayingArtist
  ) {
    throw new Error("Required player elements not found");
  }

  const playPauseBtnNonNull = playPauseBtn!;
  const nowPlayingNonNull = nowPlaying!;
  const nowPlayingArtistNonNull = nowPlayingArtist!;

  let currentTrack: HTMLButtonElement | null = null;
  let currentIndex = -1;
  const audio = new Audio();

  function updateNowPlaying(track: HTMLButtonElement): void {
    const name = track.querySelector("h3")?.textContent ?? "";
    const artist = track.querySelector("p")?.textContent ?? "";
    nowPlayingNonNull.textContent = name;
    nowPlayingArtistNonNull.textContent = artist;
  }

  function setActiveTrack(track: HTMLButtonElement): void {
    tracks.forEach((t) => t.classList.remove("bg-gray-50"));
    track.classList.add("bg-gray-50");
  }

  function playTrack(index: number): void {
    const track = tracks[index];
    const source = track.querySelector("source");
    if (!source?.src) return;

    currentIndex = index;
    currentTrack = track;
    audio.src = source.src;
    audio.play();
    updateNowPlaying(track);
    setActiveTrack(track);
    playPauseBtnNonNull.textContent = "⏸️";
  }

  function togglePlayPause(): void {
    if (!currentTrack) return;

    if (audio.paused) {
      audio.play();
      playPauseBtnNonNull.textContent = "⏸️";
    } else {
      audio.pause();
      playPauseBtnNonNull.textContent = "⏯️";
    }
  }

  function playNext(): void {
    if (currentIndex < tracks.length - 1) {
      playTrack(currentIndex + 1);
    }
  }

  function playPrev(): void {
    if (currentIndex > 0) {
      playTrack(currentIndex - 1);
    }
  }

  // Event Listeners
  tracks.forEach((track, index) => {
    track.addEventListener("click", () => playTrack(index));
  });

  playPauseBtnNonNull.addEventListener("click", togglePlayPause);
  prevBtn.addEventListener("click", playPrev);
  nextBtn.addEventListener("click", playNext);

  audio.addEventListener("ended", playNext);
  audio.addEventListener("pause", () => {
    playPauseBtnNonNull.textContent = "⏯️";
  });
  audio.addEventListener("play", () => {
    playPauseBtnNonNull.textContent = "⏸️";
  });
</script>
